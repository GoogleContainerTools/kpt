<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kpt â€“ Cfg</title>
    <link>https://googlecontainertools.github.io/kpt/reference/cfg/</link>
    <description>Recent content in Cfg on Kpt</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://googlecontainertools.github.io/kpt/reference/cfg/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Reference: Annotate</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/annotate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/annotate/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Set an annotation on one or more resources
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-annotate.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Annotate sets annotations on resources.&lt;/p&gt;
&lt;p&gt;Annotate can be useful when combined with other tools or commands that
read annotations to configure their behavior.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set an annotation on all Resources: &amp;#39;key: value&amp;#39;&lt;/span&gt;
kpt cfg annotate DIR --kv &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set an annotation on all Service Resources&lt;/span&gt;
kpt cfg annotate DIR --kv &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;value --kind Service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set an annotation on the foo Service Resource only&lt;/span&gt;
kpt cfg annotate DIR --kv &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;value --kind Service --name foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set multiple annotations&lt;/span&gt;
kpt cfg annotate DIR --kv &lt;span style=&#34;color:#000&#34;&gt;key1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;value1 --kv &lt;span style=&#34;color:#000&#34;&gt;key2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;value2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg annotate DIR --kv KEY=VALUE...
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--apiVersion
  Only set annotations on resources with this apiVersion.

--kind
  Only set annotations on resources of this kind.

--kv
  The annotation key and value to set.  May be specified multiple times
  to set multiple annotations at once.

--namespace
  Only set annotations on resources in this namespace.

--name
  Only set annotations on resources with this name.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Cat</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/cat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/cat/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Print the resources in a package
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-cat.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Cat prints the resources in a package as yaml to stdout.&lt;/p&gt;
&lt;p&gt;Cat is useful for printing only the resources in a package which might
contain other non-resource files.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print Resource config from a directory&lt;/span&gt;
kpt cfg cat my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg cat DIR

DIR:
  Path to a package directory
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Count</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/count/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Print resource counts for a package
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-count.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Count quickly summarizes the number of resources in a package.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print Resource counts from a directory&lt;/span&gt;
kpt cfg count my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print Resource counts from a cluster&lt;/span&gt;
kubectl get all -o yaml &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg count
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg count [DIR]

DIR:
  Path to a package directory.  Defaults to stdin if unspecified.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;
      </description>
    </item>
    
    <item>
      <title>Reference: Create-setter</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/create-setter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/create-setter/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Create a setter for one or more field
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-create-setter.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Setters provide a solution for template-free setting or substitution of field
values through package metadata (OpenAPI).  They are a safer alternative to
other substitution techniques which do not have the context of the
structured data &amp;ndash; e.g. using &lt;code&gt;sed&lt;/code&gt; to replace values.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;../../../guides/producer/setters&#34;&gt;creating setters&lt;/a&gt; guide for more info on creating setters.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a setter called replicas for fields matching value &amp;#34;3&amp;#34;&lt;/span&gt;
kpt cfg create-setter DIR/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# scope creating setter references to a specified field&lt;/span&gt;
kpt cfg create-setter DIR/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;replicas&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# scope creating setter references to a specified field path&lt;/span&gt;
kpt cfg create-setter DIR/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;spec.replicas&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create a setter called replicas with a description and set-by&lt;/span&gt;
kpt cfg create-setter DIR/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;package-default&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --description &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;good starter value&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# scope create a setter with a type.  the setter will make sure the set fields&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# always parse as strings with a yaml 1.1 parser (e.g. values such as 1,on,true&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# will be quoted so they are parsed as strings)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# only the final part of the the field path is specified&lt;/span&gt;
kpt cfg create-setter DIR/ app nginx --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;annotations.app&amp;#34;&lt;/span&gt; --type string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg create-setter DIR NAME VALUE

DIR:
  Path to a package directory

NAME:
  The name of the setter to create.  This is both the name that will
  be given to the *set* command, and that will be referenced by fields.
  e.g. replicas

VALUE
  The value of the filed for which setter reference must be added.
  e.g. 3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--description
  Optional description about the value.

--set-by
  Optional record of who set the value.

--value   
  Optional flag, alternative to specifying the value as an argument
  e.g. used to specify values that start with &#39;-&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Create-subst</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/create-subst/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/create-subst/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Create a substitution for one or more fields
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-create-subst.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Substitutions provide a solution for template-free substitution of field values
built on top of &lt;a href=&#34;../create-setter&#34;&gt;setters&lt;/a&gt;.  They enable substituting values into part of a
field, including combining multiple setters into a single value.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;../../../guides/producer/substitutions&#34;&gt;creating substitutions&lt;/a&gt; guide for more info on creating
substitutions.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Automatically create setters when creating the substitution, inferring&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# the setter values.&lt;/span&gt;
#
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 1. create a substitution derived from 2 setters.  The user will never&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# call the substitution directly, instead it will be computed when the&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# setters are used.&lt;/span&gt;
kpt cfg create-subst DIR/ image-tag --field-value nginx:v1.7.9 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --pattern &lt;span style=&#34;color:#4e9a06&#34;&gt;\$&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;image-setter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#4e9a06&#34;&gt;\$&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;tag-setter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 2. update the substitution value by setting one of the 2 setters it is&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# computed from&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; . tag-setter v1.8.0

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Manually create setters and substitution.  This is preferred to configure&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# the setters with a type, description, set-by, etc.&lt;/span&gt;
#
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 1. create the setter for the image name -- set the field so it isn&amp;#39;t&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# referenced&lt;/span&gt;
kpt cfg create-setter DIR/ image-setter nginx --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;package-default&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 2. create the setter for the image tag -- set the field so it isn&amp;#39;t&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# referenced&lt;/span&gt;
kpt cfg create-setter DIR/ tag-setter v1.7.9 --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;package-default&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 3. create the substitution computed from the image and tag setters&lt;/span&gt;
kpt cfg create-subst DIR/ image-tag nginx:v1.7.9 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --pattern &lt;span style=&#34;color:#4e9a06&#34;&gt;\$&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;image-setter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#4e9a06&#34;&gt;\$&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;tag-setter&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 4. update the substitution value by setting one of the setters&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; . tag-setter v1.8.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg create-subst DIR NAME --field-value VALUE --pattern PATTERN

DIR
  Path to a package directory

NAME
  The name of the substitution to create.  This is simply the unique key
  which is referenced by fields which have the substitution applied.
  e.g. image-substitution

VALUE
  The current value of the field that will have PATTERN substituted.
  e.g. nginx:1.7.9

PATTERN
  A string containing one or more MARKER substrings which will be
  substituted for setter values.  The pattern may contain multiple
  different MARKERS, the same MARKER multiple times, and non-MARKER
  substrings.
  e.g. ${image-setter}:${tag-setter}
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Delete-setter</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/delete-setter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/delete-setter/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Delete a setter for one field
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-delete-setter.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Setters provide a solution for template-free setting or substitution of field
values through package metadata (OpenAPI).  They are a safer alternative to
other substitution techniques which do not have the context of the
structured data &amp;ndash; e.g. using &lt;code&gt;sed&lt;/code&gt; to replace values.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;../../../guides/producer/setters&#34;&gt;deleting setters&lt;/a&gt; guide for more info on creating setters.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# delete a setter replicas&lt;/span&gt;
kpt cfg delete-setter DIR/ replicas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg delete-setter DIR NAME VALUE

DIR:
  Path to a package directory

NAME:
  The name of the setter to delete. e.g. replicas

&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Fmt</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/fmt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/fmt/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Format configuration files
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-fmt.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Format formats the field ordering in YAML configuration files.&lt;/p&gt;
&lt;p&gt;Inputs may be directories, files or STDIN.  Formatted resources must
include both &lt;code&gt;apiVersion&lt;/code&gt; and &lt;code&gt;kind&lt;/code&gt; fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stdin inputs are formatted and written to stdout&lt;/li&gt;
&lt;li&gt;File inputs (args) are formatted and written back to the file&lt;/li&gt;
&lt;li&gt;Directory inputs (args) are walked, each encountered .yaml and .yml file
acts as an input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For inputs which contain multiple yaml documents separated by \n&amp;mdash;\n,
each document will be formatted and written back to the file in the original
order.&lt;/p&gt;
&lt;p&gt;Field ordering roughly follows the ordering defined in the source Kubernetes
resource definitions (i.e. go structures), falling back on lexicographical
sorting for unrecognized fields.&lt;/p&gt;
&lt;p&gt;Unordered list item ordering is defined for specific Resource types and
field paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.spec.template.spec.containers (by element name)&lt;/li&gt;
&lt;li&gt;.webhooks.rules.operations (by element value)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# format file1.yaml and file2.yml&lt;/span&gt;
kpt cfg fmt file1.yaml file2.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# format all *.yaml and *.yml recursively traversing directories&lt;/span&gt;
kpt cfg fmt my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# format kubectl output&lt;/span&gt;
kubectl get -o yaml deployments &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg fmt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# format kustomize output&lt;/span&gt;
kustomize build &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg fmt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg fmt [DIR]

DIR:
  Path to a package directory.  Reads from STDIN if not provided.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Grep</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/grep/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Filter resources by their field values
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-grep.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Grep reads resources from a package or stdin and filters them by their
field values.&lt;/p&gt;
&lt;p&gt;Grep may have sources such as &lt;code&gt;kubectl get -o yaml&lt;/code&gt; piped to it, or may
be piped to other commands such as &lt;code&gt;kpt cfg tree&lt;/code&gt; for display.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# find Deployment Resources&lt;/span&gt;
kpt cfg grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kind=Deployment&amp;#34;&lt;/span&gt; my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# find Resources named nginx&lt;/span&gt;
kpt cfg grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metadata.name=nginx&amp;#34;&lt;/span&gt; my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# use tree to display matching Resources&lt;/span&gt;
kpt cfg grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metadata.name=nginx&amp;#34;&lt;/span&gt; my-dir/ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# look for Resources matching a specific container image&lt;/span&gt;
kpt cfg grep &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;spec.template.spec.containers[name=nginx].image=nginx:1\.7\.9&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    my-dir/ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg grep QUERY DIR
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;    QUERY:
      Query to match expressed as &#39;path.to.field=value&#39;.
      Maps and fields are matched as &#39;.field-name&#39; or &#39;.map-key&#39;
      List elements are matched as &#39;[list-elem-field=field-value]&#39;
      The value to match is expressed as &#39;=value&#39;
      &#39;.&#39; as part of a key or value can be escaped as &#39;\.&#39;

    DIR:
      Path to a package directory
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;    --invert-match, -v
      keep resources NOT matching the specified pattern
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: List Setters</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/list-setters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/list-setters/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    List setters for a package
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-set.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;List setters displays the setters that may be provided to the set command.
It also displays:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The current setter value&lt;/li&gt;
&lt;li&gt;A record of who last set the value&lt;/li&gt;
&lt;li&gt;A description of the value or setter&lt;/li&gt;
&lt;li&gt;The name of fields that would be updated by calling set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;../create-setter&#34;&gt;create-setter&lt;/a&gt; and &lt;a href=&#34;../create-subst&#34;&gt;create-subst&lt;/a&gt; for how setters and substitutions
are defined in a Kptfile.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# list the setters in the hello-world package&lt;/span&gt;
kpt cfg list-setters hello-world/

  NAME     VALUE    SET BY    DESCRIPTION   COUNT  
replicas   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;       isabella   good value    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg list-setters DIR [NAME]

DIR
  Path to a package directory

NAME
  Optional.  The name of the setter to display.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Set</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/set/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Set one or more field values
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-set.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;set&lt;/em&gt; command modifies configuration by setting or substituting
a user provided value into resource fields.  Which fields are set or
have values substituted is configured by line comments on the configuration
fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calling set may change multiple fields at once.&lt;/li&gt;
&lt;li&gt;To see the list of setters for a package run &lt;a href=&#34;../list-setters&#34;&gt;list-setters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;set&lt;/em&gt; command may only be run on a directory containing a Kptfile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;../create-setter&#34;&gt;create-setter&lt;/a&gt; and &lt;a href=&#34;../create-subst&#34;&gt;create-subst&lt;/a&gt; for more on how setters and substitutions
are defined in a Kptfile.&lt;/p&gt;
&lt;p&gt;Example setter referenced from a field in a configuration file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;foo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replicas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# {&amp;#34;$ref&amp;#34;:&amp;#34;#/definitions/io.k8s.cli.setters.replicas&amp;#34;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One could the replicas field to 4 by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg set hello-world/ replicas 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Setters may have a description of the current value.  This may be defined
along with the value by specifying the &lt;code&gt;--description&lt;/code&gt; flag.&lt;/p&gt;
&lt;h4 id=&#34;setby&#34;&gt;SetBy&lt;/h4&gt;
&lt;p&gt;Setters may record who set the current value.  This may be defined by
specifying the &lt;code&gt;--set-by&lt;/code&gt; flag.  If unspecified the current
value for set-by will be cleared from the setter.&lt;/p&gt;
&lt;h4 id=&#34;substitutions&#34;&gt;Substitutions&lt;/h4&gt;
&lt;p&gt;Substitutions define field values which may be composed of one or more setters
substituted into a string pattern.  e.g. setting only the tag portion of the
&lt;code&gt;image&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;When set is called, it may also update substitutions which are derived from
the setter.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set replicas to 3 using the &amp;#39;replicas&amp;#39; setter&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; hello-world/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set the replicas to 5 and include a description of the value&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; hello-world/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; --description &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;need at least 5 replicas&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set the replicas to 5 and record who set this value&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; hello-world/ replicas &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mia&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# set the tag portion of the image field to &amp;#39;1.8.1&amp;#39; using the &amp;#39;tag&amp;#39; setter&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# the tag setter is referenced as a value by a substitution in the Kptfile&lt;/span&gt;
kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; hello-world/ tag 1.8.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg set DIR NAME VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR
  Path to a package directory. e.g. hello-world/

NAME
  The name of the setter. e.g. replicas

VALUE
  The new value to set on fields. e.g. 3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--description
  Optional description about the value.

--set-by
  Optional record of who set the value.  Clears the last set-by
  value if unset.

--values   
  Optional flag, the values of the setter to be set to
  e.g. used to specify values that start with &#39;-&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Tree</title>
      <link>https://googlecontainertools.github.io/kpt/reference/cfg/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/cfg/tree/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Render resources using a tree structure
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/cfg-tree.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Tree displays the contents of a package using a tree structure to show
the relationships between directories, resources, and fields.&lt;/p&gt;
&lt;p&gt;Tree supports a number of built-in fields such as replicas, images, ports,
etc.  Additional fields may be printed by providing the &lt;code&gt;--field&lt;/code&gt; flag&lt;/p&gt;
&lt;p&gt;By default, kpt cfg tree uses Resource graph structure if any relationships
between resources (ownerReferences) are detected e.g. when printing
remote cluster resources rather than local package resources.
Otherwise, directory graph structure is used.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print Resources using directory structure&lt;/span&gt;
kpt cfg tree my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print replicas, container name, and container image and fields for Resources&lt;/span&gt;
kpt cfg tree my-dir --replicas --image --name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print all common Resource fields&lt;/span&gt;
kpt cfg tree my-dir/ --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print the &amp;#34;foo&amp;#34;&amp;#34; annotation&lt;/span&gt;
kpt cfg tree my-dir/ --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metadata.annotations.foo&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print the status of resources with status.condition type of &amp;#34;Completed&amp;#34;&lt;/span&gt;
kubectl get all -o yaml &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg tree &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --field&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;status.conditions[type=Completed].status&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print live Resources from a cluster using owners for graph structure&lt;/span&gt;
kubectl get all -o yaml &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg tree --replicas --name --image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print live Resources with status condition fields&lt;/span&gt;
kubectl get all -o yaml &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt cfg tree &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name --image --replicas &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --field&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;status.conditions[type=Completed].status&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --field&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;status.conditions[type=Complete].status&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --field&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;status.conditions[type=Ready].status&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --field&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;status.conditions[type=ContainersReady].status&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt cfg tree [DIR] [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory.  Defaults to STDIN if not specified.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--args:
  if true, print the container args field

--command:
  if true, print the container command field

--env:
  if true, print the container env field

--field:
  dot-separated path to a field to print

--image:
  if true, print the container image fields

--name:
  if true, print the container name fields

--ports:
  if true, print the container port fields

--replicas:
  if true, print the replica field

--resources:
  if true, print the resource reservations
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
  </channel>
</rss>
