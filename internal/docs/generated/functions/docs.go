// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "mdtogo"; DO NOT EDIT.
package functions

var RunShort = `Reoncile config functions to Resources.`
var RunLong = `
Reconcile config functions to Resources.

run sequentially invokes all config functions in the directory, providing Resources
in the directory as input to the first function, and writing the output of the last
function back to the directory.

The ordering of functions is determined by the order they are encountered when walking the
directory.  To clearly specify an ordering of functions, multiple functions may be
declared in the same file, separated by '---' (the functions will be invoked in the
order they appear in the file).

#### Arguments:

  DIR:
    Path to local directory.

#### Config Functions:

  Config functions are specified as Kubernetes types containing a metadata.annotations.[config.kubernetes.io/function]
  field specifying an image for the container to run.  This image tells run how to invoke the container.

  Example config function:

	# in file example/fn.yaml
	apiVersion: fn.example.com/v1beta1
	kind: ExampleFunctionKind
	metadata:
	  annotations:
	    config.kubernetes.io/function: |
	      container:
	        # function is invoked as a container running this image
	        image: gcr.io/example/examplefunction:v1.0.1
	    config.kubernetes.io/local-config: "true" # tools should ignore this
	spec:
	  configField: configValue

  In the preceding example, 'kpt config run example/' would identify the function by
  the metadata.annotations.[config.kubernetes.io/function] field.  It would then write all Resources in the directory to
  a container stdin (running the gcr.io/example/examplefunction:v1.0.1 image).  It
  would then write the container stdout back to example/, replacing the directory
  file contents.
`
var RunExamples = `
kpt config run example/`

var SinkShort = `Implement a Sink by writing input to a local directory.`
var SinkLong = `
Implement a Sink by writing input to a local directory.

    kpt config sink DIR

  DIR:
    Path to local directory.

` + "`" + `sink` + "`" + ` writes its input to a directory
`
var SinkExamples = `
    kpt config source DIR/ | your-function | kpt config sink DIR/`

var SourceShort = `Implement a Source by reading a local directory.`
var SourceLong = `
Implement a Source by reading a local directory.

    kpt config source DIR

  DIR:
    Path to local directory.

` + "`" + `source` + "`" + ` emits configuration to act as input to a function
`
var SourceExamples = `
    # emity configuration directory as input source to a function
    kpt config source DIR/

    kpt config source DIR/ | your-function | kpt config sink DIR/`
