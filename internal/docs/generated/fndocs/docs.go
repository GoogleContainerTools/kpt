// Code generated by "mdtogo"; DO NOT EDIT.
package fndocs

var FnShort = `Transform and validate packages using containerized functions.`
var FnLong = `
The ` + "`" + `fn` + "`" + ` command group contains subcommands for transforming and validating ` + "`" + `kpt` + "`" + ` packages
using containerized functions.
`
var FnExamples = `

`

var DocShort = `Display the documentation for a function`
var DocLong = `
` + "`" + `kpt fn doc` + "`" + ` invokes the function container with ` + "`" + `--help` + "`" + ` flag.

  kpt fn doc --image=IMAGE

--image is a required flag.
If the function supports --help, it will print the documentation to STDOUT.
Otherwise, it will exit with non-zero exit code and print the error message to
STDERR.
`
var DocExamples = `
  # diplay the documentation for image gcr.io/kpt-fn/set-namespace:v0.1.1
  kpt fn doc --image gcr.io/kpt-fn/set-namespace:v0.1.1
`

var ExportShort = `Auto-generating function pipelines for different workflow orchestrators`
var ExportLong = `
  kpt fn export DIR/ [--fn-path FUNCTIONS_DIR/] --workflow ORCHESTRATOR [--output OUTPUT_FILENAME]
  
  DIR:
    Path to a package directory.
  FUNCTIONS_DIR:
    Read functions from the directory instead of the DIR/.
  ORCHESTRATOR:
    Supported orchestrators are:
      - github-actions
      - cloud-build
      - gitlab-ci
      - jenkins
      - tekton
      - circleci
  OUTPUT_FILENAME:
    Specifies the filename of the generated pipeline. If omitted, the default
    output is stdout
`
var ExportExamples = `
  # read functions from DIR, run them against it as one step.
  # write the generated GitHub Actions pipeline to main.yaml.
  kpt fn export DIR/ --output main.yaml --workflow github-actions

  # discover functions in FUNCTIONS_DIR and run them against resource in DIR.
  # write the generated Cloud Build pipeline to stdout.
  kpt fn export DIR/ --fn-path FUNCTIONS_DIR/ --workflow cloud-build
`

var RenderShort = `Render a package.`
var RenderLong = `
  kpt fn render [PKG_PATH] [flags]

Args:

  PKG_PATH:
    Local package path to render. Directory must exist and contain a Kptfile
    to be updated. Defaults to the current working directory.

Flags:

  --results-dir:
    Path to a directory to write structured results. Directory must exist.
    Structured results emitted by the functions are aggregated and saved
    to ` + "`" + `results.yaml` + "`" + ` file in the specified directory.
`
var RenderExamples = `
  # Render the package in current directory
  $ kpt fn render

  # Render the package in current directory and save results in my-results-dir
  $ kpt fn --results-dir my-results-dir render

  # Render my-package-dir
  $ kpt fn render my-package-dir
`

var RunShort = `Locally execute one or more functions in containers`
var RunLong = `
  kpt fn run DIR [flags]

If the container exits with non-zero status code, run will fail and print the
container ` + "`" + `STDERR` + "`" + `.

  DIR:
    Path to a package directory.  Defaults to stdin if unspecified.
`
var RunExamples = `
  # read the Resources from DIR, provide them to a container my-fun as input,
  # write my-fn output back to DIR
  kpt fn run DIR/ --image gcr.io/example.com/my-fn

  # provide the my-fn with an input ConfigMap containing ` + "`" + `data: {foo: bar}` + "`" + `
  kpt fn run DIR/ --image gcr.io/example.com/my-fn:v1.0.0 -- foo=bar

  # run the functions in FUNCTIONS_DIR against the Resources in DIR
  kpt fn run DIR/ --fn-path FUNCTIONS_DIR/


  # discover functions in DIR and run them against Resource in DIR.
  # functions may be scoped to a subset of Resources -- see ` + "`" + `kpt help fn run` + "`" + `
  kpt fn run DIR/
`

var SinkShort = `Specify a directory as an output sink package`
var SinkLong = `
  kpt fn sink [DIR]
  
  DIR:
    Path to a package directory.  Defaults to stdout if unspecified.
`
var SinkExamples = `
  # run a function using explicit sources and sinks
  kpt fn source DIR/ |
    kpt fn run --image gcr.io/example.com/my-fn |
    kpt fn sink DIR/
`

var SourceShort = `Specify a directory as an input source package`
var SourceLong = `
  kpt fn source [DIR...]
  
  DIR:
    Path to a package directory.  Defaults to stdin if unspecified.
`
var SourceExamples = `
  # print to stdout configuration from DIR/ formatted as an input source
  kpt fn source DIR/

  # run a function using explicit sources and sinks
  kpt fn source DIR/ |
    kpt fn run --image gcr.io/example.com/my-fn |
    kpt fn sink DIR/
`
