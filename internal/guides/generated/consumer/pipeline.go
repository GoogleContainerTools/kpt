// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "mdtogo"; DO NOT EDIT.
package consumer

var PipelineGuide = `
## Composing a Pipeline

In order do something useful with a function, we need to compose a
[Pipeline][concept-pipeline] with a source and a sink function.

This guide covers how to use ` + "`" + `kpt fn` + "`" + ` to run a pipeline of functions. You can
also use a container-based workflow orchestrator like
[Cloud Build][cloud-build], [Tekton][tekton], or [Argo Workflows][argo].

### Example

First, initialize a git repo if necessary:

  git init

Fetch an example configuraton package:

  kpt pkg get https://github.com/GoogleContainerTools/kpt-functions-sdk.git/example-configs example-configs
  cd example-configs
  git add . && git commit -m 'fetched example-configs'

You can run a function, like [label-namespace], imperatively:

  kpt fn run --image gcr.io/kpt-functions/label-namespace . -- label_name=color label_value=orange

You should see labels added to ` + "`" + `Namespace` + "`" + ` configuration files:

  git status

Alternatively, you can run a function declaratively:

  cat << EOF > kpt-func.yaml
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: my-config
    annotations:
      config.k8s.io/function: |
        container:
          image:  gcr.io/kpt-functions/label-namespace
      config.kubernetes.io/local-config: "true"
  data:
    label_name: color
    label_value: orange
  EOF

You should see the same results as in the previous examples:

  kpt fn run .
  git status

You can have multiple function declarations in a directory. Let's add a second
function:

  cat << EOF > kpt-func2.yaml
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: my-config
    annotations:
      config.k8s.io/function: |
        container:
          image:  gcr.io/kpt-functions/validate-rolebinding
      config.kubernetes.io/local-config: "true"
  data:
    subject_name: bob@foo-corp.com
  EOF

` + "`" + `fn run` + "`" + ` executes both functions:

  kpt fn run .

In this case, ` + "`" + `validate-rolebinding` + "`" + ` will find policy violations and fail with
a non-zero exit code.

Refer to help pages for more details on how to use ` + "`" + `kpt fn` + "`" + `

  kpt fn run --help

## Next Steps

- Try running other functions in the [catalog].
- Get a quickstart on writing functions from the [function producer docs].
- Learn about [functions concepts] like sources, sinks, and pipelines.
`
